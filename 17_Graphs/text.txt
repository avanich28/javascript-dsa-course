// Topic: Add Vertex

class Graph {
  constructor() {
    this.adjacencyList = {}
  }

  addVertex(vertex) {
    if(!this.adjacencyList[vertex]) {
      this.adjacencyList[vertex] = [];
      return true
    }
    return false
  }

  // Topic: Add Edge
  addEdge(vertex1, vertex2) {
    // make sure vertex1 and vertex2 actually exist
    if(this.adjacentList[vertex1] && this.adjacencyList[vertex2]) {
      this.adjacencyList[vertex1].push(vertex2);
      this.adjacencyList[vertex2].push(vertex1);
      return true;
    }
    return false;
  }

  // Topic: Remove Edge
  removeEdge(vertex1, vertex2) {
    if(this.adjacencyList[vertex1] && this.adjacencyList[vertex2]) {
      this.adjacencyList[vertex1] = this.adjacencyList[vertex1].filter(v => v !== vertex2);
      
      this.adjacencyList[vertex2] = this.adjacentList[vertex2].filter(v => v !== vertex1);
      return true;
    }
    return false;
  }

  // Topic: Remove Vertex
  removeVertex(vertex) {
    if(!this.adjacencyList[vertex]) return undefined;
    while(this.adjacencyList[vertex].length) {
      let temp = this.adjacencyList[vertex].pop();
      this.removeEdge(vertex, temp);
    }
    delete this.adjacentList[vertex];
    return this; // graph
  }
}
myGraph.addEdge('1', '2')